---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TEST_CLUSTER_NAME: "test"
  TEST_DOMAIN: "example.com"
  TEST_TIMEZONE: "UTC"

tasks:
  dependencies:
    desc: Build helm chart dependencies for charts that have them
    summary: |
      Builds helm chart dependencies by running helm dependency build
      on all charts that have a dependencies section in their Chart.yaml.
      Uses checksum-based caching to avoid unnecessary rebuilds.
    sources:
      - charts/**/Chart.yaml
    generates:
      - .task-cache/helm-dependencies.txt
    method: checksum
    silent: true
    cmds:
      - echo "üîÑ Building helm chart dependencies..."
      - |
        dependency_found=false
        repos_added=()

        for category in charts/*/; do
          if [ -d "$category" ]; then
            for chart_dir in "$category"*/; do
              if [ -f "$chart_dir/Chart.yaml" ]; then
                chart_name=$(basename "$chart_dir")
                chart_path=${chart_dir%/}

                # Check if the chart has dependencies
                if grep -q "^dependencies:" "$chart_path/Chart.yaml"; then
                  dependency_found=true

                  # Extract repository URLs and add them if not already added
                  while IFS= read -r repo_url; do
                    if [ -n "$repo_url" ] && [[ ! " ${repos_added[@]} " =~ " ${repo_url} " ]]; then
                      repo_name=$(echo "$repo_url" | sed 's|https://||' | sed 's|/|-|g' | sed 's|\.|-|g')
                      echo "  ÔøΩ Adding helm repository: $repo_name ($repo_url)"
                      helm repo add "$repo_name" "$repo_url" > /dev/null 2>&1 || true
                      repos_added+=("$repo_url")
                    fi
                  done < <(grep -A 10 "^dependencies:" "$chart_path/Chart.yaml" | grep "repository:" | sed 's/.*repository: *"\?\([^"]*\)"\?.*/\1/')

                  echo "  ÔøΩüîÑ Building dependencies for $chart_name..."
                  if helm dependency build "$chart_path" > /dev/null 2>&1; then
                    echo "  ‚úÖ $chart_name dependencies built successfully"
                  else
                    echo "  ‚ùå $chart_name dependency build failed"
                    echo "  Running helm dependency build for debugging:"
                    helm dependency build "$chart_path"
                    exit 1
                  fi
                fi
              fi
            done
          fi
        done

        # Update repositories if any were added
        if [ ${#repos_added[@]} -gt 0 ]; then
          echo "  üîÑ Updating helm repositories..."
          helm repo update > /dev/null 2>&1
        fi

        if [ "$dependency_found" = true ]; then
          echo "‚úÖ All chart dependencies built successfully!"
        else
          echo "‚ÑπÔ∏è  No charts with dependencies found"
        fi
      - mkdir -p .task-cache && touch .task-cache/helm-dependencies.txt

  validation:
    desc: Validate all helm charts by running helm template
    summary: |
      Validates all helm charts in the repository by running helm template
      on each chart to ensure they generate valid Kubernetes manifests.
    sources:
      - charts/**/Chart.yaml
      - charts/**/values.yaml
      - charts/**/templates/**/*.yaml
    generates:
      - .task-cache/helm-validation.txt
    method: checksum
    silent: true
    cmds:
      - echo "üîç Validating helm charts..."
      - |
        for category in charts/*/; do
          if [ -d "$category" ]; then
            category_name=$(basename "$category")
            for chart_dir in "$category"*/; do
              if [ -f "$chart_dir/Chart.yaml" ]; then
                chart_name=$(basename "$chart_dir")
                # Remove trailing slash from chart_dir
                chart_path=${chart_dir%/}
                if helm template "$chart_name" "$chart_path" \
                  --values "$chart_path/values.yaml" \
                  --set cluster.name={{.TEST_CLUSTER_NAME}} \
                  --set cluster.top_level_domain={{.TEST_DOMAIN}} \
                  --set cluster.timezone={{.TEST_TIMEZONE}} \
                  > /dev/null 2>&1; then
                  echo "  ‚úÖ $chart_name - PASSED"
                else
                  echo "  ‚ùå $chart_name - FAILED"
                  echo "  Running helm template for debugging:"
                  helm template "$chart_name" "$chart_path" \
                    --values "$chart_path/values.yaml" \
                    --set cluster.name={{.TEST_CLUSTER_NAME}} \
                    --set cluster.top_level_domain={{.TEST_DOMAIN}} \
                    --set cluster.timezone={{.TEST_TIMEZONE}}
                  exit 1
                fi
              fi
            done
          fi
        done
      - echo "‚úÖ All helm charts validated successfully!"
      - mkdir -p .task-cache && touch .task-cache/helm-validation.txt

  lint:
    desc: Run helm lint on all charts
    summary: |
      Runs helm lint on all charts to check for issues and best practices.
    sources:
      - charts/**/Chart.yaml
      - charts/**/values.yaml
      - charts/**/templates/**/*.yaml
    generates:
      - .task-cache/helm-lint.txt
    method: checksum
    silent: true
    cmds:
      - echo "üîç Linting helm charts..."
      - |
        for category in charts/*/; do
          if [ -d "$category" ]; then
            category_name=$(basename "$category")
            for chart_dir in "$category"*/; do
              if [ -f "$chart_dir/Chart.yaml" ]; then
                chart_name=$(basename "$chart_dir")
                # Remove trailing slash from chart_dir
                chart_path=${chart_dir%/}
                if helm lint "$chart_path" \
                  --values "$chart_path/values.yaml" \
                  --set cluster.name={{.TEST_CLUSTER_NAME}} \
                  --set cluster.top_level_domain={{.TEST_DOMAIN}} \
                  --set cluster.timezone={{.TEST_TIMEZONE}} \
                  > /dev/null 2>&1; then
                  echo "  ‚úÖ $chart_name - PASSED"
                else
                  echo "  ‚ùå $chart_name - FAILED"
                  echo "  Running helm lint for debugging:"
                  helm lint "$chart_path" \
                    --values "$chart_path/values.yaml" \
                    --set cluster.name={{.TEST_CLUSTER_NAME}} \
                    --set cluster.top_level_domain={{.TEST_DOMAIN}} \
                    --set cluster.timezone={{.TEST_TIMEZONE}}
                  exit 1
                fi
              fi
            done
          fi
        done
      - echo "‚úÖ All helm charts linted successfully!"
      - mkdir -p .task-cache && touch .task-cache/helm-lint.txt

  validate-icons:
    desc: Validate icon fields in helm charts (online by default)
    summary: |
      Validates icon fields in values.yaml files, checks format consistency,
      suggests defaults for missing icons, and verifies icons exist online.
      Supports both Iconify icons and HTTP URL icons. Uses online validation by default.
    sources:
      - charts/**/values.yaml
      - scripts/validate-icons.sh
    generates:
      - .task-cache/icon-validation-online.txt
    method: checksum
    silent: true
    cmds:
      - chmod +x scripts/validate-icons.sh
      - scripts/validate-icons.sh --online
      - mkdir -p .task-cache && touch .task-cache/icon-validation-online.txt

  validate-icons-offline:
    desc: Validate icon fields in helm charts (offline mode)
    summary: |
      Validates icon fields in values.yaml files, checks format consistency,
      and suggests defaults for missing icons based on application type.
      Supports both Iconify icons and HTTP URL icons. Offline validation only.
    sources:
      - charts/**/values.yaml
      - scripts/validate-icons.sh
    generates:
      - .task-cache/icon-validation-offline.txt
    method: checksum
    silent: true
    cmds:
      - chmod +x scripts/validate-icons.sh
      - scripts/validate-icons.sh
      - mkdir -p .task-cache && touch .task-cache/icon-validation-offline.txt

  validate-all:
    desc: Run all validation tasks on helm charts (online by default)
    summary: |
      Comprehensive validation that runs helm dependency build,
      helm template validation, helm lint, and online icon validation
      (Iconify + URL) on all charts.
    silent: true
    cmds:
      - task: dependencies
      - task: validation
      - task: lint
      - task: validate-icons

  validate-all-offline:
    desc: Run all validation tasks on helm charts (offline mode)
    summary: |
      Comprehensive validation that runs helm dependency build,
      helm template validation, helm lint, and offline icon validation
      on all charts.
    silent: true
    cmds:
      - task: dependencies
      - task: validation
      - task: lint
      - task: validate-icons-offline
