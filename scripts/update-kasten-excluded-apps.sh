#!/bin/bash

# Script to update the excludedApps list in k10-kasten-operator values.yaml
# This script automatically generates a list of OpenShift-specific namespaces to exclude from Kasten backups

set -euo pipefail

# Parse command line arguments
DRY_RUN=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $0 [--dry-run]"
            exit 1
            ;;
    esac
done

# Configuration
CHART_DIR="/workspaces/openshift/charts/infrastructure/k10-kasten-operator"
OPENSHIFT_EXCLUSIONS_FILE="${CHART_DIR}/openshift-excluded-apps.yaml"
BACKUP_FILE="${OPENSHIFT_EXCLUSIONS_FILE}.backup.$(date +%Y%m%d_%H%M%S)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if kubectl is available
if ! command -v kubectl &> /dev/null; then
    print_error "kubectl command not found. Please ensure you have kubectl installed and configured."
    exit 1
fi

# Check if the chart directory exists
if [[ ! -d "$CHART_DIR" ]]; then
    print_error "Chart directory not found: $CHART_DIR"
    exit 1
fi

# Create backup (unless dry run)
if [[ "$DRY_RUN" == "true" ]]; then
    print_status "DRY RUN: Would create backup of OpenShift exclusions file: $BACKUP_FILE"
else
    if [[ -f "$OPENSHIFT_EXCLUSIONS_FILE" ]]; then
        print_status "Creating backup of OpenShift exclusions file: $BACKUP_FILE"
        cp "$OPENSHIFT_EXCLUSIONS_FILE" "$BACKUP_FILE"
    else
        print_status "Creating new OpenShift exclusions file (no backup needed)"
    fi
fi

# Get current OpenShift namespaces
print_status "Fetching OpenShift-specific namespaces..."
if ! kubectl get namespaces &> /dev/null; then
    print_error "Failed to connect to Kubernetes cluster. Please check your kubectl configuration."
    exit 1
fi

# Generate the excluded apps list (fixed awk command)
OPENSHIFT_NAMESPACES=$(kubectl get ns --no-headers=true | awk '/^openshift/{print $1}' | sort)

if [[ -z "$OPENSHIFT_NAMESPACES" ]]; then
    print_warning "No OpenShift namespaces found. This might indicate you're not connected to an OpenShift cluster."
    exit 1
fi

# Count namespaces
NAMESPACE_COUNT=$(echo "$OPENSHIFT_NAMESPACES" | wc -l)
print_status "Found $NAMESPACE_COUNT OpenShift namespaces to exclude"

# Generate the new OpenShift exclusions file
print_status "Generating new OpenShift exclusions configuration..."

# Create a temporary file with the new configuration
TEMP_FILE=$(mktemp)

# Generate the new YAML content
cat > "$TEMP_FILE" << EOF
# OpenShift System Namespaces to Exclude from Kasten K10 Backups
# This file is automatically generated by scripts/update-kasten-excluded-apps.sh
# Do not edit manually - it will be overwritten
#
# Generated on: $(date '+%Y-%m-%d %H:%M:%S')
# Cluster namespaces found: $NAMESPACE_COUNT

# OpenShift system namespaces
excludedApps:
EOF

# Add OpenShift namespaces
echo "$OPENSHIFT_NAMESPACES" | while read -r namespace; do
    echo "  - $namespace" >> "$TEMP_FILE"
done

# Replace the original file (unless dry run)
if [[ "$DRY_RUN" == "true" ]]; then
    print_status "DRY RUN: Would update OpenShift exclusions file with new list"
    print_status "DRY RUN: Preview of new OpenShift exclusions file:"
    echo "---"
    cat "$TEMP_FILE"
    echo "---"
    rm "$TEMP_FILE"
else
    print_status "Updating OpenShift exclusions file..."
    mv "$TEMP_FILE" "$OPENSHIFT_EXCLUSIONS_FILE"
    print_status "Successfully updated OpenShift exclusions with $NAMESPACE_COUNT namespaces"
    if [[ -f "$BACKUP_FILE" ]]; then
        print_status "Backup saved as: $BACKUP_FILE"
    fi
fi

# Show a summary of what was added
echo
print_status "OpenShift namespaces added to excludedApps:"
echo "$OPENSHIFT_NAMESPACES" | sed 's/^/  - /'

echo
if [[ "$DRY_RUN" == "true" ]]; then
    print_status "DRY RUN complete! No files were modified."
    print_status "Run without --dry-run to apply changes."
else
    print_status "Update complete! You can now commit the changes to your repository."
    print_warning "Remember to review the changes before committing:"
    echo "  git diff $OPENSHIFT_EXCLUSIONS_FILE"
    echo
    print_status "Custom excluded apps are managed separately in:"
    echo "  $CHART_DIR/values.yaml (kasten.excludedApps section)"
fi
