cluster:
  top_level_domain: example.com
  name: openshift
  admin_email: admin@example.com
  timezone: America/New_York

application:
  name: Paperless-NGX
  group: Utilities
  icon: simple-icons:paperless
  image: https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/main/docs/logo.png
  description: "A document management system"
  port: 8000

storage:
  config:
    storageClassName: synology-iscsi
  media:
    nfs:
      server: nas
      path: /volume1/media

app-template:
  controllers:
    main:
      type: deployment
      replicas: 1
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      labels:
        kasten/backup: "false"
      containers:
        main:
          image:
            # renovate: docker-image
            repository: ghcr.io/paperless-ngx/paperless-ngx
            tag: 2.18.4
            pullPolicy: Always
          env:
            TZ: TIMEZONE
            COMPOSE_PROJECT_NAME: paperless-ngx
            PAPERLESS_TIME_ZONE: America/New_York
            PAPERLESS_URL: https://hostname.example.com
            PAPERLESS_DBHOST:
              valueFrom:
                secretKeyRef:
                  name: paperless-db-pguser-paperless
                  key: host
            PAPERLESS_DBNAME:
             valueFrom:
                secretKeyRef:
                  name: paperless-db-pguser-paperless
                  key: dbname
            PAPERLESS_DBUSER:
              valueFrom:
                secretKeyRef:
                  name: paperless-db-pguser-paperless
                  key: user
            PAPERLESS_DBPASS:
              valueFrom:
                secretKeyRef:
                  name: paperless-db-pguser-paperless
                  key: password
            PAPERLESS_REDIS: redis://paperless-ngx-redis.paperless.svc.cluster.local:6379
            PAPERLESS_CONSUMPTION_DIR: /data/media/paperless/consume
            PAPERLESS_DATA_DIR: /data/media/paperless/data
            PAPERLESS_MEDIA_ROOT: /data/media/paperless/media
            PAPERLESS_FILENAME_FORMAT: '{{"{{"}} created_year {{"}}"}}/{{"{{"}} correspondent {{"}}"}}/{{"{{"}} title {{"}}"}}'
            PAPERLESS_FILENAME_FORMAT_REMOVE_NONE: true
            PAPERLESS_CONSUMER_POLLING: 60
            PAPERLESS_CONSUMER_DELETE_DUPLICATES: true
            PAPERLESS_CONSUMER_RECURSIVE: true
            PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS: true
            PAPERLESS_OCR_LANGUAGE: eng
            PAPERLESS_TIKA_ENABLED: true
            USERMAP_UID: 0
            USERMAP_GID: 0
            PAPERLESS_TIKA_ENDPOINT: http://paperless-ngx-tika.paperless.svc.cluster.local:9998 
            PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless-ngx-gotenberg.paperless.svc.cluster.local:3000
          probes:
            liveness:
              enabled: true
            readiness:
              enabled: true
            startup:
              enabled: true
              spec:
                failureThreshold: 30
                periodSeconds: 5
      serviceAccount:
        name: paperless-ngx-sa

    gotenberg:
      type: deployment
      replicas: 1
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      labels:
        kasten/backup: "false"
      containers:
        gotenburg:
          image:
            repository: thecodingmachine/gotenberg
            tag: 8.23.1
            pullPolicy: IfNotPresent
          env:
            - {name: DISABLE_GOOGLE_CHROME, value: '1'}
      serviceAccount:
        name: paperless-ngx-sa

    redis:
      type: deployment
      replicas: 1
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      labels:
        kasten/backup: "false"
      containers:
        redis:
          image:
            repository: public.ecr.aws/docker/library/redis
            tag: 8.2.1
            pullPolicy: IfNotPresent
      serviceAccount:
        name: paperless-ngx-sa

    tika:
      type: deployment
      replicas: 1
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      labels:
        kasten/backup: "false"
      containers:
        tika:
          image:
            repository: ghcr.io/paperless-ngx/tika
            tag: 2.9.1-full
            pullPolicy: IfNotPresent
          env:
            PAPERLESS_TIKA_ENABLED: true
            PAPERLESS_TIKA_ENDPOINT: http://paperless-ngx-tika.paperless.svc.cluster.local:9998
            PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless-ngx-gotenberg.paperless.svc.cluster.local:3000
      serviceAccount:
        name: paperless-ngx-sa

  persistence:
    data:
      enabled: true
      existingClaim: paperless-data-volume
      advancedMounts:
        main:
          main:
          - path: /data

  service:
    main:
      controller: main
      ports:
        http:
          port: 8000

    redis:
      controller: redis
      ports:
        redis:
          port: 6379
    tika:
      controller: tika
      ports:
        tika:
          port: 9998

    gotenberg:
      controller: gotenberg
      ports:
        gotenberg:
          port: 3000

  defaultPodOptions:
    # labels:
    #   app: paperless-ngx
    #   version: 1.0.0
    securityContext:
      runAsUser: 0
      runAsGroup: 0
      fsGroup: 0
      fsGroupChangePolicy: "OnRootMismatch"

  # persistence:
  #   config:
  #     enabled: true
  #     existingClaim: paperless-ngx-config
  #     globalMounts:
  #       - path: /data
  #   config-file:
  #     type: configMap
  #     name: paperless-ngx-config
  #     globalMounts:
  #       - path: /data/settings.js
  #         subPath: settings.js
  #         readOnly: true
  
