apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
data:
  init-config.sh: |
    #!/bin/sh
    cat /app/config-file/config.json.template > /tmp/config.json

    yq -i '.ApiPart.FanartTvAPIKey = env(FANARTTV_API_KEY)' /tmp/config.json
    yq -i '.ApiPart.tvdbapi = env(TVDB_API_KEY)' /tmp/config.json
    yq -i '.ApiPart.tmdbtoken = env(TMDB_READ_API_TOKEN)' /tmp/config.json
    yq -i '.ApiPart.PlexToken = env(PLEX_TOKEN)' /tmp/config.json

    mkdir -p /config
    chmod 660 /tmp/config.json
    mv /tmp/config.json /config/config.json

    # Download fonts and images only if they don't already exist
    if [ ! -f "/config/Colus-Regular.ttf" ]; then
        wget -O /config/Colus-Regular.ttf https://raw.githubusercontent.com/Kometa-Team/Community-Configs/refs/heads/master/bullmoose20/posterizarr/Colus-Regular.ttf
    fi
    if [ ! -f "/config/Comfortaa-Medium.ttf" ]; then
        wget -O /config/Comfortaa-Medium.ttf https://raw.githubusercontent.com/Kometa-Team/Community-Configs/refs/heads/master/bullmoose20/posterizarr/Comfortaa-Medium.ttf
    fi
    if [ ! -f "/config/bottom-up-fade-background.png" ]; then
        wget -O /config/bottom-up-fade-background.png https://raw.githubusercontent.com/Kometa-Team/Community-Configs/refs/heads/master/bullmoose20/posterizarr/bottom-up-fade-background.png
    fi
    if [ ! -f "/config/bottom-up-fade.png" ]; then
        wget -O /config/bottom-up-fade.png https://raw.githubusercontent.com/Kometa-Team/Community-Configs/refs/heads/master/bullmoose20/posterizarr/bottom-up-fade.png
    fi
    if [ -f "/config/temp/Posterizarr.Running" ]; then
        rm /config/temp/Posterizarr.Running
    fi
  webhook-server.py: |
    #!/usr/bin/env python3
    import os
    import json
    import logging
    from datetime import datetime
    from http.server import BaseHTTPRequestHandler, HTTPServer
    from urllib.parse import urlparse, parse_qs

    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    class WebhookHandler(BaseHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            self.output_dir = "/config/watcher"
            # Ensure watcher directory exists
            os.makedirs(self.output_dir, exist_ok=True)
            super().__init__(*args, **kwargs)

        def do_POST(self):
            # Parse the request
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)

            try:
                # Try to parse JSON data
                data = json.loads(post_data.decode('utf-8'))
                logger.info(f"Received webhook: {data}")

                # Extract event type from different webhook sources
                event_type = None
                if 'eventType' in data:  # Sonarr/Radarr format
                    event_type = data['eventType']
                elif 'event' in data:    # Alternative format
                    event_type = data['event']

                # Only process download/import events, skip Test events
                if event_type in ['Download', 'Import'] and event_type != 'Test':
                    logger.info(f"Processing {event_type} event")
                    result = self.create_posterizarr_file(data, event_type)
                    if result:
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(b'{"status": "success", "message": "Posterizarr file created"}')
                    else:
                        self.send_response(500)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(b'{"status": "error", "message": "Failed to create posterizarr file"}')
                else:
                    logger.info(f"Ignoring event type: {event_type}")
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(b'{"status": "ignored", "message": "Event type not processed"}')

            except Exception as e:
                logger.error(f"Error processing webhook: {e}")
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(b'{"status": "error", "message": "Failed to process webhook"}')

        def do_GET(self):
            # Health check endpoint
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(b'{"status": "healthy"}')
            else:
                self.send_response(404)
                self.end_headers()

        def create_posterizarr_file(self, data, event_type):
            """Create a .posterizarr file with webhook data"""
            try:
                # Determine platform and extract relevant data
                posterizarr_data = {}

                # Check if this is a Sonarr event (has series data)
                if "series" in data and isinstance(data, dict):
                    platform = "Sonarr"
                    posterizarr_data = {
                        "arr_platform": platform,
                        "event": event_type,
                        "arr_series_title": data.get("series", {}).get("title", data.get("title", "")),
                        "arr_series_tvdb": data.get("series", {}).get("tvdbId", data.get("tvdbId", "")),
                        "arr_series_tmdb": data.get("series", {}).get("tmdbId", data.get("tmdbId", "")),
                        "arr_series_imdb": data.get("series", {}).get("imdbId", data.get("imdbId", "")),
                        "arr_series_path": data.get("series", {}).get("path", data.get("path", "")),
                        "arr_sonarr_series_year": data.get("series", {}).get("year", data.get("year", "")),
                        "arr_episode_path": data.get("episodeFile", {}).get("path", data.get("episodePath", "")),
                        "arr_episode_season": data.get("episodes", [{}])[0].get("seasonNumber", data.get("seasonNumber", "")) if data.get("episodes") else data.get("seasonNumber", ""),
                        "arr_episode_numbers": data.get("episodes", [{}])[0].get("episodeNumber", data.get("episodeNumber", "")) if data.get("episodes") else data.get("episodeNumber", ""),
                        "arr_episode_titles": data.get("episodes", [{}])[0].get("title", data.get("episodeTitle", "")) if data.get("episodes") else data.get("episodeTitle", "")
                    }

                # Check if this is a Radarr event (has movie data)
                elif "movie" in data and isinstance(data, dict):
                    platform = "Radarr"
                    movie_data = data.get("movie", data)
                    posterizarr_data = {
                        "arr_platform": platform,
                        "event": event_type,
                        "arr_movie_title": movie_data.get("title", ""),
                        "arr_movie_tmdb": movie_data.get("tmdbId", ""),
                        "arr_movie_imdb": movie_data.get("imdbId", ""),
                        "arr_movie_year": movie_data.get("year", ""),
                        "arr_movie_path": movie_data.get("path", ""),
                        "arr_moviefile_path": data.get("movieFile", {}).get("path", data.get("moviePath", "")),
                        "arr_moviefile_id": data.get("movieFile", {}).get("id", data.get("movieId", ""))
                    }

                else:
                    # Generic webhook data - try to infer from available data
                    platform = "Unknown"
                    posterizarr_data = {
                        "arr_platform": platform,
                        "event": event_type,
                        "raw_data": json.dumps(data)  # Include raw data for debugging
                    }
                    # Log the available keys to help with debugging
                    available_keys = list(data.keys()) if isinstance(data, dict) else []
                    logger.error(f"Unknown platform. Available keys in payload: {available_keys}")
                    logger.error(f"Unknown platform: {posterizarr_data}")
                    return False

                # Create timestamp and filename
                timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
                filename = f"recently_added_{timestamp}.posterizarr"
                filepath = os.path.join(self.output_dir, filename)

                # Write the .posterizarr file
                with open(filepath, 'w') as f:
                    for key, value in posterizarr_data.items():
                        if value:  # Only write non-empty values
                            f.write(f"[{key}]: {value}\n")

                logger.info(f"Posterizarr file created for {platform}: {filepath}")
                return True

            except Exception as e:
                logger.error(f"Failed to create posterizarr file: {e}")
                return False

    if __name__ == '__main__':
        port = int(os.environ.get('WEBHOOK_PORT', 8080))
        server = HTTPServer(('0.0.0.0', port), WebhookHandler)
        logger.info(f"Starting webhook server on port {port}")
        server.serve_forever()
  config.json.template: |
    {
      "ApiPart": {
        "FanartTvAPIKey": "${FANARTTV_API_KEY}",
        "tvdbapi": "${TVDB_API_KEY}",
        "tmdbtoken": "${TMDB_READ_API_TOKEN}",
        "PlexToken": "${PLEX_TOKEN}",
        "JellyfinAPIKey": "JELLYFINAPIKEY",
        "EmbyAPIKey": "EMBYAPIKEY",
        "FavProvider": "tmdb",
        "PreferredLanguageOrder": [
          "xx",
          "en"
        ],
        "PreferredSeasonLanguageOrder": [
          "xx",
          "en"
        ],
        "tmdb_vote_sorting": "vote_average",
        "WidthHeightFilter": "false",
        "PosterMinWidth": "2000",
        "PosterMinHeight": "3000",
        "BgTcMinWidth": "3840",
        "BgTcMinHeight": "2160",
        "PreferredBackgroundLanguageOrder": [
          "xx",
          "en"
        ]
      },
      "PlexPart": {
        "LibstoExclude": [
          "Music",
          "Photos",
          "Playlists"
        ],
        "PlexUrl": "http://plex.plex:32400",
        "UsePlex": "true",
        "UploadExistingAssets": "false"
      },
      "JellyfinPart": {
        "LibstoExclude": [
          "Music",
          "Photos",
          "Playlists"
        ],
        "JellyfinUrl": "http://jellyfin.jellyfin:8097",
        "UseJellyfin": "false",
        "UploadExistingAssets": "false",
        "ReplaceThumbwithBackdrop": "false"
      },
      "EmbyPart": {
        "LibstoExclude": [
          "Music",
          "Photos",
          "Playlists"
        ],
        "EmbyUrl": "http://emby.emby:8096",
        "UseEmby": "false",
        "UploadExistingAssets": "false",
        "ReplaceThumbwithBackdrop": "false"
      },
      "Notification": {
        "SendNotification": "false",
        "AppriseUrl": "discord://{WebhookID}/{WebhookToken}/",
        "Discord": "https://discord.com/api/webhooks/add-your-discord-webhook-here",
        "DiscordUserName": "Posterizarr",
        "UseUptimeKuma": "false",
        "UptimeKumaUrl": "https://uptime-kuma.domain.com/api/push/asdfasdf"
      },
      "PrerequisitePart": {
        "AssetPath": "/data/plex/assets",
        "magickinstalllocation": "/usr/local/bin",
        "maxLogs": "5",
        "font": "Comfortaa-Medium.ttf",
        "backgroundfont": "Comfortaa-Medium.ttf",
        "titlecardfont": "Comfortaa-Medium.ttf",
        "overlayfile": "bottom-up-fade.png",
        "backgroundoverlayfile": "bottom-up-fade-background.png",
        "titlecardoverlayfile": "bottom-up-fade-background.png",
        "LibraryFolders": "true",
        "Posters": "true",
        "SeasonPosters": "true",
        "BackgroundPosters": "true",
        "TitleCards": "true",
        "show_skipped": "false",
        "logLevel": "2",
        "SkipTBA": "true",
        "SkipJapTitle": "true",
        "AssetCleanup": "true",
        "AutoUpdateIM": "false",
        "seasonoverlayfile": "bottom-up-fade.png",
        "RTLFont": "Colus-Regular.ttf",
        "NewLineOnSpecificSymbols": "false",
        "NewLineSymbols": [
          " - ",
          ": "
        ],
        "PlexUpload": "true",
        "BackupPath": "/data/plex/backup",
        "SkipAddText": "false",
        "FollowSymlink": "false",
        "ForceRunningDeletion": "false",
        "AutoUpdatePosterizarr": "false",
        "ManualAssetPath": "/data/plex/manual",
        "poster4k": "overlay-innerglow.png",
        "Poster1080p": "overlay-innerglow.png",
        "Background4k": "backgroundoverlay-innerglow.png",
        "Background1080p": "backgroundoverlay-innerglow.png",
        "TC4k": "backgroundoverlay-innerglow.png",
        "TC1080p": "backgroundoverlay-innerglow.png",
        "UsePosterResolutionOverlays": "false",
        "UseBackgroundResolutionOverlays": "false",
        "UseTCResolutionOverlays": "false",
        "DisableHashValidation": "false",
        "DisableOnlineAssetFetch": "false"
      },
      "OverlayPart": {
        "ImageProcessing": "true",
        "outputQuality": "92%"
      },
      "PosterOverlayPart": {
        "fontAllCaps": "true",
        "AddBorder": "false",
        "AddText": "true",
        "AddOverlay": "true",
        "fontcolor": "white",
        "bordercolor": "white",
        "minPointSize": "83",
        "maxPointSize": "250",
        "borderwidth": "30",
        "MaxWidth": "1200",
        "MaxHeight": "485",
        "text_offset": "+300",
        "AddTextStroke": "false",
        "strokecolor": "black",
        "strokewidth": "6",
        "lineSpacing": "0",
        "TextGravity": "south"
      },
      "BackgroundOverlayPart": {
        "fontAllCaps": "true",
        "AddOverlay": "false",
        "AddBorder": "false",
        "AddText": "false",
        "fontcolor": "white",
        "bordercolor": "white",
        "minPointSize": "95",
        "maxPointSize": "250",
        "borderwidth": "30",
        "MaxWidth": "3000",
        "MaxHeight": "500",
        "text_offset": "+200",
        "AddTextStroke": "false",
        "strokecolor": "black",
        "strokewidth": "6",
        "lineSpacing": "0",
        "TextGravity": "south"
      },
      "TitleCardOverlayPart": {
        "UseBackgroundAsTitleCard": "false",
        "AddOverlay": "true",
        "AddBorder": "false",
        "bordercolor": "white",
        "borderwidth": "30",
        "BackgroundFallback": "false"
      },
      "TitleCardTitleTextPart": {
        "fontAllCaps": "true",
        "AddEPTitleText": "true",
        "fontcolor": "white",
        "minPointSize": "95",
        "maxPointSize": "250",
        "MaxWidth": "2500",
        "MaxHeight": "300",
        "text_offset": "+290",
        "AddTextStroke": "false",
        "strokecolor": "black",
        "strokewidth": "6",
        "lineSpacing": "0",
        "TextGravity": "south"
      },
      "TitleCardEPTextPart": {
        "fontAllCaps": "true",
        "AddEPText": "true",
        "fontcolor": "white",
        "minPointSize": "80",
        "maxPointSize": "120",
        "MaxWidth": "1600",
        "MaxHeight": "150",
        "text_offset": "+140",
        "SeasonTCText": "Season",
        "EpisodeTCText": "Episode",
        "AddTextStroke": "false",
        "strokecolor": "black",
        "strokewidth": "4",
        "lineSpacing": "0",
        "TextGravity": "south"
      },
      "SeasonPosterOverlayPart": {
        "fontAllCaps": "true",
        "AddBorder": "false",
        "AddText": "true",
        "AddOverlay": "true",
        "fontcolor": "white",
        "bordercolor": "white",
        "minPointSize": "95",
        "maxPointSize": "250",
        "borderwidth": "30",
        "MaxWidth": "1200",
        "MaxHeight": "485",
        "text_offset": "+300",
        "AddTextStroke": "false",
        "strokecolor": "black",
        "strokewidth": "6",
        "lineSpacing": "0",
        "ShowFallback": "false",
        "TextGravity": "south"
      },
      "ShowTitleOnSeasonPosterPart": {
        "AddShowTitletoSeason": "false",
        "fontAllCaps": "true",
        "AddTextStroke": "false",
        "strokecolor": "black",
        "strokewidth": "6",
        "fontcolor": "white",
        "minPointSize": "45",
        "maxPointSize": "300",
        "MaxWidth": "1900",
        "MaxHeight": "500",
        "text_offset": "+300",
        "lineSpacing": "0",
        "TextGravity": "south"
      }
    }
